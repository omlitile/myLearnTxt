队列就是一种先进先出的数据结构，在java里边，已经有很多写好的队列，供我们选择使用。


1.不阻塞的队列
    LinkedList：并发不安全的，基于数组实现的队列
    PriorityQueue：优先级队列，可用它实现java里的最大堆/最小堆
    ConcurrentLinkedQueue：并发安全的，基于链表实现的队列，因为他新增的时候是在队列尾部新增，删除的时候是在头结点那边删除

2.阻塞队列
    ArrayBlockingQueue ：一个由数组支持的有界队列。
        在构造时需要指定容量， 并可以选择是否需要公平性，如果公平参数被设置true，等待时间最长的线程会优先得到处理（其实就是通过将ReentrantLock设置为true来 达到这种公平性的：即等待时间最长的线程会先操作）。
        通常，公平性会使你在性能上付出代价，只有在的确非常需要的时候再使用它。
        它是基于数组的阻塞循环队 列，此队列按 FIFO（先进先出）原则对元素进行排序。

    LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。
        LinkedBlockingQueue的容量是没有上限的（说的不准确，在不指定时容量为Integer.MAX_VALUE，不要然的话在put时怎么会受阻呢），
        但是也可以选择指定其最大容量，它是基于链表的队列，此队列按 FIFO（先进先出）排序元素。

    PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。
        一个带优先级的 队列，而不是先进先出队列。元素按优先级顺序被移除，该队列也没有上限（看了一下源码，PriorityBlockingQueue是对 PriorityQueue的再次包装，是基于堆数据结构的，
        而PriorityQueue是没有容量限制的，与ArrayList一样，所以在优先阻塞 队列上put时是不会受阻的。
        虽然此队列逻辑上是无界的，但是由于资源被耗尽，所以试图执行添加操作可能会导致 OutOfMemoryError），但是如果队列为空，那么取元素的操作take就会阻塞，所以它的检索操作take是受阻的。
        另外，往入该队列中的元 素要具有比较能力（实现比较接口）。

    DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。
        （基于PriorityQueue来实现的）是一个存放Delayed 元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。
        该队列的头部是延迟期满后保存时间最长的 Delayed 元素。
        如果延迟都还没有期满，则队列没有头部，并且poll将返回null。
        当一个元素的 getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于或等于零的值时，则出现期满，poll就以移除这个元素了。
        此队列不允许使用 null 元素。
    SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。


3.一些功能类似的方法
3.1 add() 和 offer()
add方法，当插入一个元素的时候，如果队列已满，则抛出异常
offer方法，当插入一个元素的时候，如果队列已满，则返回false
// When using a capacity-restricted queue, this method is generally
     * preferable to {@link #add}, which can fail to insert an element only
     * by throwing an exception.
offer方法上的英文注释说，对于有限长度的队列，使用offer方法优于add方法，因为offer方法并不会抛出异常

3.2 remove() 和 poll()
移除并返回队列首部的元素
remove方法：如果队列为空，则抛出异常
poll方法：如果队列为空，则返回null

3.3 element() 和 peek()
返回队列头部的元素
element方法：如果队列为空，则抛出异常
peek方法：如果队列为空，则返回null

3.4  put() 和 take()
put方法：添加一个元素，如果队列满，则阻塞
take方法： 移除并返回队列头部元素，如果队列为空，则阻塞



