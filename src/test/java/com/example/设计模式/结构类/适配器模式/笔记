基本概念：
适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作。

角色：
    Target：目标抽象类
        可以是一个抽象类或接口，也可以是具体类。
        目标抽象类的接口被客户端调用。
        目标抽象类定义客户所需接口。
    Adapter：适配器类
        作为一个转换器，对Adaptee和Target进行适配。
        对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。
        类适配器中，它继承继承Target和Adaptee使二者产生联系。
    Adaptee：适配者类
        包含了客户端需要的方法。但由于某些原因不能直接调用，所以需要被适配。
    Client：客户类
        在客户类中针对目标抽象类进行编程，调用在目标抽象类中定义的业务方法

在对象适配器模式中，适配器类继承了目标抽象类并定义了一个适配者类的对象实例，在所继承的目标抽象类方法中调用适配者类的相应业务方法。

在类适配器模式中，适配器类实现了目标抽象类接口并继承了适配者类，并在目标抽象类的实现方法中调用所继承的适配者类的方法。

两者的对比：

对象适配器的优缺点：
优点：一个适配器可以匹配多个适配者。
缺点：灵活性不强。在适配器类中覆盖适配者类中的方法较为困难。

类适配器的优缺点：
优点：灵活性更强。因为适配器类是适配者类的子类，所以在适配器类中可以覆盖适配者类中的方法。
缺点：适配器类只能适配一个适配者。

适配器模式的优点：
耦合性低。将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。
增加了类的透明性和复用性。将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。
符合“开闭原则”。可以在不修改原有代码的基础上增加新的适配器类。









